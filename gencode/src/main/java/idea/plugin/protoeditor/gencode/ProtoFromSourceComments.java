/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package idea.plugin.protoeditor.gencode;

import com.google.common.collect.ImmutableList;
import com.intellij.psi.PsiComment;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import com.intellij.psi.PsiWhiteSpace;
import idea.plugin.protoeditor.lang.psi.PbFile;
import idea.plugin.protoeditor.lang.resolve.PbFileResolver;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** Locates a .proto file based on generated source comments */
public final class ProtoFromSourceComments {

  private ProtoFromSourceComments() {}

  @Nullable
  public static PbFile findProtoOfGeneratedCode(String commentPrefix, PsiFile file) {
    PsiElement[] children = new PsiElement[3];
    // Some generated files start with a character encoding marker.
    PsiElement first = file.getFirstChild();
    if (first != null
        && first.getText().contains("-*- coding:")
        && first.getNextSibling() instanceof PsiWhiteSpace) {
      first = first.getNextSibling().getNextSibling();
    }
    children[0] = first;
    children[0] = file.getFirstChild();
    children[1] = children[0] != null ? children[0].getNextSibling() : null;
    children[2] = children[1] != null ? children[1].getNextSibling() : null;
    if (children[2] == null) {
      return null;
    }
    return searchForSourceCommentInInitialBlock(commentPrefix, file, children);
  }

  @Nullable
  private static PbFile searchForSourceCommentInInitialBlock(
      String commentPrefix, PsiFile file, PsiElement[] children) {
    // Uses comments in a generated source file to locate the source proto.
    // E.g., for Python see:
    // https://github.com/google/protobuf/blob/3.2.x/src/google/protobuf/compiler/python/python_generator.cc#L168
    List<String> generatedByProtocComments =
        ImmutableList.of(
            String.format(
                "%s Generated by the protocol buffer compiler.  DO NOT EDIT!", commentPrefix),
            String.format("%s Code generated by protoc-gen-go. DO NOT EDIT.", commentPrefix));
    Pattern sourceCommentPattern =
        Pattern.compile(String.format("^%s source: (.*\\.proto)$", commentPrefix));
    while (isWhitespaceOrComment(children[2])) {
      if (!(children[0] instanceof PsiComment)
          || !(children[1] instanceof PsiWhiteSpace)
          || !(children[2] instanceof PsiComment)) {
        shiftInNextChild(children);
        continue;
      }
      String generatedComment = children[0].getText();
      String sourceComment = children[2].getText();
      if (generatedByProtocComments.contains(generatedComment)) {
        Matcher matcher = sourceCommentPattern.matcher(sourceComment);
        if (matcher.find()) {
          String path = matcher.group(1);
          List<PbFile> pbFiles = PbFileResolver.findFilesForContext(path, file);
          if (!pbFiles.isEmpty()) {
            return pbFiles.get(0);
          } else {
            return null;
          }
        }
      }
      shiftInNextChild(children);
    }
    return null;
  }

  private static void shiftInNextChild(PsiElement[] children) {
    int lastIndex = children.length - 1;
    for (int i = 0; i < lastIndex; i++) {
      children[i] = children[i + 1];
    }
    children[lastIndex] = children[lastIndex].getNextSibling();
  }

  private static boolean isWhitespaceOrComment(@Nullable PsiElement node) {
    return node instanceof PsiWhiteSpace || node instanceof PsiComment;
  }
}
